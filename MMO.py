from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, CallbackContext, MessageHandler, filters, CallbackQueryHandler, JobQueue
import logging
import random
import json
import os
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π —á–∞—Ç–æ–≤
conversation_states = {}

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤
players = {}

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–∏–ª—å–¥–∏–π
guilds = {}

# –í –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞ –¥–æ–±–∞–≤–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
CONVERSATION_STATES = {
    'IN_GUILD_MENU': 1,
    'IN_TOURNAMENT_MENU': 2,
    'AWAITING_GUILD_NAME': 10,
    'AWAITING_JOIN_GUILD': 4 
}

# –î–æ–ø–æ–ª–Ω—è–µ–º —Å–∏—Å—Ç–µ–º—É –≤–µ—Å–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
item_weights = {
    '–ú–∞–ª–æ–µ –∑–µ–ª—å–µ –∑–¥–æ—Ä–æ–≤—å—è': 0.5,
    '–°—Ä–µ–¥–Ω–µ–µ –∑–µ–ª—å–µ –∑–¥–æ—Ä–æ–≤—å—è': 1,
    '–ë–æ–ª—å—à–æ–µ –∑–µ–ª—å–µ –∑–¥–æ—Ä–æ–≤—å—è': 2,
    '–ú–µ—á': 5,
    '–õ—É–∫': 3,
    '–ü–æ—Å–æ—Ö': 4,
    '–ö–æ–ª—å—á—É–≥–∞': 8,
    '–ö–∞–ø—é—à–æ–Ω': 2,
    '–ë—Ä–æ–Ω–∏–∫–∏': 6,
    'üêæ –ï–Ω–æ—Ç': 3,
    'ü¶ä –õ–∏—Å–∞': 2,
    'ü¶î –Å–∂': 1
}

# –î–æ–ø–æ–ª–Ω—è–µ–º —Å–ª–æ–≤–∞—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
item_effects = {
    '–ú–µ—á': {'attack_bonus': (5, 10)},
    '–õ—É–∫': {'attack_bonus': (3, 7)},
    '–ü–æ—Å–æ—Ö': {'magic_bonus': (4, 8)},
    '–ö–æ–ª—å—á—É–≥–∞': {'defense_bonus': (5, 10)},
    'üêæ –ï–Ω–æ—Ç': {'scavenge_bonus': 0.2}
}

# –ú–∏—Ä–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è
world_events = []

# –¢—É—Ä–Ω–∏—Ä—ã
tournaments = []

# –ú–µ—Å—Ç–∞ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
locations = [
    'üå≤ –õ–µ—Å',
    'üè∞ –ü–µ—â–µ—Ä–∞',
    'üè∞ –ó–∞–º–æ–∫',
    'üè° –î–µ—Ä–µ–≤–Ω—è',
    'üèôÔ∏è –ì–æ—Ä–æ–¥',
    'üèîÔ∏è –ì–æ—Ä–∞',
    'üåø –õ–µ—Å–Ω–æ–µ —Ü–∞—Ä—Å—Ç–≤–æ',
    'üï≥Ô∏è –ü–æ–¥–∑–µ–º–µ–ª—å–µ',
    'üåä –†–µ–∫–∞',
    'üèúÔ∏è –ü—É—Å—Ç—ã–Ω—è'
]

# –°–ª–æ–≤–∞—Ä—å —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏ –º–æ–Ω—Å—Ç—Ä–æ–≤
monsters = {
    'üëπ –ì–æ–±–ª–∏–Ω': {
        'base_health': 30,
        'base_attack': 5,
        'description': 'üßô‚ôÇÔ∏è –°–ª–∞–±—ã–π –º–æ–Ω—Å—Ç—Ä, –∂–∏–≤—É—â–∏–π –≤ –ø–µ—â–µ—Ä–∞—Ö.'
    },
    'üõ°Ô∏è –û—Ä–∫': {
        'base_health': 50,
        'base_attack': 10,
        'description': 'ü™ñ –°–∏–ª—å–Ω—ã–π –º–æ–Ω—Å—Ç—Ä, –æ–±–∏—Ç–∞—é—â–∏–π –≤ —Å—Ç–µ–ø—è—Ö.'
    },
    'üêâ –î—Ä–∞–∫–æ–Ω': {
        'base_health': 100,
        'base_attack': 20,
        'description': 'üî• –ú–æ—â–Ω–æ–µ —Å—É—â–µ—Å—Ç–≤–æ, –æ–±–∏—Ç–∞—é—â–µ–µ –≤ –≥–æ—Ä–∞—Ö.'
    },
    'üßü –¢—Ä–æ–ª–ª—å': {
        'base_health': 70,
        'base_attack': 15,
        'description': 'üå≥ –ö—Ä–µ–ø–∫–∏–π –º–æ–Ω—Å—Ç—Ä, –∂–∏–≤—É—â–∏–π –≤ –ª–µ—Å—É.'
    },
    'üêç –®–∞—Ö—Ç—ë—Ä—Å–∫–∏–π –∑–º–µ–π': {
        'base_health': 40,
        'base_attack': 8,
        'description': 'ü™± –û–ø–∞—Å–Ω—ã–π –∑–º–µ–π, –æ–±–∏—Ç–∞—é—â–∏–π –≤ —à–∞—Ö—Ç–∞—Ö.'
    },
    'üëª –ü—Ä–∏–∑—Ä–∞–∫': {
        'base_health': 35,
        'base_attack': 6,
        'description': 'üïµÔ∏è‚ôÇÔ∏è Ta–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å—É—â–µ—Å—Ç–≤–æ, –æ–±–∏—Ç–∞—é—â–µ–µ –≤ –∑–∞–º–∫–∞—Ö.'
    }
}

pets = {
    'üêæ –ï–Ω–æ—Ç': {
        'health': 20,
        'attack': 3,
        'description': 'üåø –õ–æ–≤–∫–∏–π –∏ —Ö–∏—Ç—Ä—ã–π —Å–ø—É—Ç–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤ –±–æ—é.'
    },
    'ü¶ä –õ–∏—Å–∞': {
        'health': 25,
        'attack': 4,
        'description': 'ü¶ä –ë—ã—Å—Ç—Ä–∞—è –∏ —É–º–Ω–∞—è, –∏–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ä–∞–∑–≤–µ–¥–∫–∏.'
    },
    'ü¶î –Å–∂': {
        'health': 30,
        'attack': 2,
        'description': 'üå¥ –ú–∏–ª—ã–π –∏ –∫–æ–ª—é—á–∏–π –∑–∞—â–∏—Ç–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∑–∞—â–∏—â–∞—Ç—å –≤–∞—Å.'
    }
}

# –°–ª–æ–≤–∞—Ä—å —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏ –æ–¥–µ–∂–¥—ã
clothes = {
    '–ö–æ–ª—å—á—É–≥–∞': {
        'defense_bonus': random.randint(5, 10),
        'health_bonus': random.randint(5, 15),
        'description': '–õ–µ–≥–∫–∞—è –±—Ä–æ–Ω—è, —É–≤–µ–ª–∏—á–∏–≤–∞—é—â–∞—è –∑–¥–æ—Ä–æ–≤—å–µ.'
    },
    '–ö–∞–ø—é—à–æ–Ω': {
        'defense_bonus': random.randint(1, 3),  # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞—â–∏—Ç—É
        'health_bonus': random.randint(3, 8),
        'attack_bonus': random.randint(1, 4),
        'description': '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∞—Ç–∞–∫—É –∏ –Ω–µ–º–Ω–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å–µ.'
    },
    '–ë—Ä–æ–Ω–∏–∫–∏': {
        'defense_bonus': random.randint(8, 12),  # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞—â–∏—Ç—É
        'health_bonus': random.randint(10, 20),
        'attack_bonus': random.randint(-3, 3),
        'description': '–°—Ä–µ–¥–Ω—è—è –±—Ä–æ–Ω—è, —É–≤–µ–ª–∏—á–∏–≤–∞—é—â–∞—è –∑–¥–æ—Ä–æ–≤—å–µ.'
    }
}

# –°–ª–æ–≤–∞—Ä—å —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏ –æ—Ä—É–∂–∏—è
weapons = {
    '–ú–µ—á': {
        'attack_bonus': random.randint(5, 10),
        'description': '–û—Å—Ç—Ä–æ–µ –æ—Ä—É–∂–∏–µ –¥–ª—è –±–ª–∏–∂–Ω–µ–≥–æ –±–æ—è.'
    },
    '–õ—É–∫': {
        'attack_bonus': random.randint(3, 7),
        'description': '–û—Ä—É–∂–∏–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–≥–æ –±–æ—è.'
    },
    '–ü–æ—Å–æ—Ö': {
        'attack_bonus': random.randint(4, 8),
        'description': '–ú–∞–≥–∏—á–µ—Å–∫–æ–µ –æ—Ä—É–∂–∏–µ.'
    }
}

# –°–ª–æ–≤–∞—Ä—å —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏ –∑–µ–ª–∏–π
potions = {
    '–ú–∞–ª–æ–µ –∑–µ–ª—å–µ –∑–¥–æ—Ä–æ–≤—å—è': {
        'health': 20,
        'description': '–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç 20 –∑–¥–æ—Ä–æ–≤—å—è.'
    },
    '–°—Ä–µ–¥–Ω–µ–µ –∑–µ–ª—å–µ –∑–¥–æ—Ä–æ–≤—å—è': {
        'health': 50,
        'description': '–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç 50 –∑–¥–æ—Ä–æ–≤—å—è.'
    },
    '–ë–æ–ª—å—à–æ–µ –∑–µ–ª—å–µ –∑–¥–æ—Ä–æ–≤—å—è': {
        'health': 100,
        'description': '–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç 100 –∑–¥–æ—Ä–æ–≤—å—è.'
    }
}

MAX_ITEMS = 10  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
MAX_WEIGHT = 50  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ–±—â–∏–π –≤–µ—Å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è

def save_game():
    with open('players.json', 'w') as f:
        json.dump(players, f)
    with open('guilds.json', 'w') as f:
        json.dump(guilds, f)

def load_game():
    global players, guilds
    if os.path.exists('players.json'):
        with open('players.json') as f:
            players = json.load(f)
    if os.path.exists('guilds.json'):
        with open('guilds.json') as f:
            guilds = json.load(f)

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏–≥—Ä–æ–∫–∞
def init_player(user_id: int, name: str):
    players[user_id] = {
        'name': name,
        'level': 1,
        'health': 100,
        'max_health': 100,
        'attack': 10,
        'defense': 5,
        'gold': 100,
        'location': '–î–µ—Ä–µ–≤–Ω—è',
        'inventory': [],
        'inventory_weight': 0,
        'equipped': {
            'weapon': None,
            'armor': None
        },
        'active_buffs': {},
        'stats': {
            'monsters_killed': 0,
            'damage_dealt': 0,
            'quests_completed': 0
        },
        'last_active': datetime.now(),
        'pet': None,
        'current_monster': None,
        'experience': 0,
        'experience_to_next_level': 100,
        'inventory_weight': 0
    }

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
weapons.update({
    'üó°Ô∏è –ö–∏–Ω–∂–∞–ª —Ç–µ–Ω–µ–π': {
        'attack_bonus': (8, 12),
        'description': '–ú–∞–≥–∏—á–µ—Å–∫–∏–π –∫–∏–Ω–∂–∞–ª, –Ω–∞–Ω–æ—Å—è—â–∏–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–º–Ω—ã–π —É—Ä–æ–Ω',
        'type': 'weapon',
        'weight': 3
    }
})

clothes.update({
    'üõ°Ô∏è –©–∏—Ç –¥—Ä–∞–∫–æ–Ω–∞': {
        'defense_bonus': 15,
        'health_bonus': 20,
        'description': '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π —â–∏—Ç –∏–∑ –¥—Ä–∞–∫–æ–Ω—å–µ–π —á–µ—à—É–∏',
        'type': 'armor',
        'weight': 10
    }
})

potions.update({
    'üß™ –≠–ª–∏–∫—Å–∏—Ä —è—Ä–æ—Å—Ç–∏': {
        'effect': {'attack_multiplier': 1.5, 'duration': 300},
        'description': '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∞—Ç–∞–∫—É –Ω–∞ 50% –Ω–∞ 5 –º–∏–Ω—É—Ç',
        'type': 'buff',
        'weight': 1
    }
})

async def calculate_damage(attacker, defender):
    base_attack = attacker.get('attack', 0)
    if attacker.get('equipped', {}).get('weapon'):
        weapon = weapons[attacker['equipped']['weapon']]
        base_attack += random.randint(*weapon['attack_bonus'])
    
    defense = defender.get('defense', 0)
    damage = max(1, base_attack - defense + random.randint(-2, 2))
    return damage

async def battle_cycle(player, monster):
    while player['health'] > 0 and monster['health'] > 0:
        player_damage = await calculate_damage(player, monster)
        monster['health'] -= player_damage
        
        monster_damage = await calculate_damage(monster, player)
        player['health'] -= monster_damage
        
        yield {
            'player_damage': player_damage,
            'monster_damage': monster_damage,
            'player_health': player['health'],
            'monster_health': monster['health']
        }

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–∏–ª—å–¥–∏–∏
async def create_guild(update: Update, context: CallbackContext, guild_name: str):
    user_id = update.message.from_user.id
    player = players.get(user_id)
    
    if not player:
        await update.message.reply_text("‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    if len(guild_name) < 3:
        await update.message.reply_text("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –≥–∏–ª—å–¥–∏–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤!")
        return

    if guild_name in guilds:
        await update.message.reply_text("‚ùå –ì–∏–ª—å–¥–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        return

    guilds[guild_name] = {
        'leader': user_id,
        'members': [user_id],
        'created_at': datetime.now(),
        'level': 1,
        'reputation': 0
    }
    
    players[user_id]['guild'] = guild_name
    await update.message.reply_text(f"‚úÖ –ì–∏–ª—å–¥–∏—è ¬´{guild_name}¬ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
    await main_menu(update, context)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –≥–∏–ª—å–¥–∏—é
async def join_guild(update: Update, context: CallbackContext, guild_name: str):
    user_id = update.message.from_user.id
    player = players.get(user_id)
    
    if not player:
        await update.message.reply_text("‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    if guild_name not in guilds:
        await update.message.reply_text("‚ùå –ì–∏–ª—å–¥–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        return

    if user_id in guilds[guild_name]['members']:
        await update.message.reply_text("‚ùå –í—ã —É–∂–µ –≤ —ç—Ç–æ–π –≥–∏–ª—å–¥–∏–∏!")
        return

    guilds[guild_name]['members'].append(user_id)
    players[user_id]['guild'] = guild_name
    await update.message.reply_text(f"‚úÖ –í—ã –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –≥–∏–ª—å–¥–∏—é ¬´{guild_name}¬ª!")
    await main_menu(update, context)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–∏–ª—å–¥–∏–∏
async def guild_info(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    if user_id not in players:
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!")
        return

    player = players[user_id]
    if 'guild' not in player:
        await update.message.reply_text("‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥–∏–ª—å–¥–∏–∏!")
        return

    guild_name = player['guild']
    guild = guilds.get(guild_name)
    
    if not guild:
        await update.message.reply_text("‚ùå –ì–∏–ª—å–¥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return

    members = "\n".join([f"‚Ä¢ {players[member_id]['name']}" for member_id in guild['members']])
    
    await update.message.reply_text(
        f"üè∞ –ì–∏–ª—å–¥–∏—è: {guild_name}\n"
        f"üëë –õ–∏–¥–µ—Ä: {players[guild['leader']]['name']}\n"
        f"üìÖ –°–æ–∑–¥–∞–Ω–∞: {guild['created_at'].strftime('%d.%m.%Y %H:%M')}\n"
        f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ {guild['members']}):\n{members}"
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∏—Ä–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
def create_world_event():
    events = [
        "üåã –ò–∑–≤–µ—Ä–∂–µ–Ω–∏–µ –≤—É–ª–∫–∞–Ω–∞! –í—Å–µ –∏–≥—Ä–æ–∫–∏ –ø–æ–ª—É—á–∞—é—Ç —É—Ä–æ–Ω.",
        "üåßÔ∏è –ù–∞—á–∞–ª—Å—è —Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å. –í—Å–µ –∏–≥—Ä–æ–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç –∑–¥–æ—Ä–æ–≤—å–µ.",
        "üêâ –î—Ä–∞–∫–æ–Ω –ø–æ—è–≤–∏–ª—Å—è –≤ –º–∏—Ä–µ! –í—Å–µ –∏–≥—Ä–æ–∫–∏ –ø–æ–ª—É—á–∞—é—Ç –±–æ–Ω—É—Å –∫ –∞—Ç–∞–∫–µ.",
        "üå™Ô∏è –ù–∞—á–∞–ª–∞—Å—å –±—É—Ä—è! –í—Å–µ –∏–≥—Ä–æ–∫–∏ —Ç–µ—Ä—è—é—Ç –ø—Ä–µ–¥–º–µ—Ç—ã –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è."
    ]
    event = random.choice(events)
    world_events.append({
        'event': event,
        'time': datetime.now()
    })
    return event

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∏—Ä–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π
async def show_world_events(update: Update, context: CallbackContext):
    if not world_events:
        await update.message.reply_text("–ú–∏—Ä–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π –Ω–µ—Ç.")
        return

    events_text = "\n".join([f"{event['event']} ({event['time'].strftime('%Y-%m-%d %H:%M:%S')})" for event in world_events])
    await update.message.reply_text(f"–ú–∏—Ä–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è:\n{events_text}")

# –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É –¥–ª—è –º–∏—Ä–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π (–≤ —Ñ—É–Ω–∫—Ü–∏—é main)
async def world_event_scheduler(context: CallbackContext):
    if random.random() < 0.3:
        event = create_world_event()
        await context.bot.send_message(
            chat_id='@–≤–∞—à_–∫–∞–Ω–∞–ª',  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID
            text=f"üåç –ú–∏—Ä–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ: {event}"
        )
        await send_notification(user_id, "–ù–∞—á–∞–ª–æ—Å—å –º–∏—Ä–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ!")

async def tournament_scheduler(context: CallbackContext):
    if not tournaments or datetime.now() >= tournaments[-1]['end_time']:
        new_tournament = create_tournament()
        await context.bot.send_message(
            chat_id='@–≤–∞—à_–∫–∞–Ω–∞–ª',
            text=f"üèÜ –ù–∞—á–∞—Ç –Ω–æ–≤—ã–π —Ç—É—Ä–Ω–∏—Ä: {new_tournament['name']}! –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å!"
        )
        await send_notification(user_id, "–ù–æ–≤—ã–π —Ç—É—Ä–Ω–∏—Ä –Ω–∞—á–∞–ª—Å—è!")

async def admin_command(update: Update, context: CallbackContext):
    if update.effective_user.id not in ADMINS:
        return
    
    command = context.args[0]
    if command == 'give_gold':
        user_id = int(context.args[1])
        amount = int(context.args[2])
        players[user_id]['gold'] += amount
        await update.message.reply_text(f"–í—ã–¥–∞–Ω–æ {amount} –∑–æ–ª–æ—Ç–∞ –∏–≥—Ä–æ–∫—É {user_id}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞
def create_tournament():
    tournament = {
        'name': f"–¢—É—Ä–Ω–∏—Ä #{len(tournaments) + 1}",
        'start_time': datetime.now(),
        'end_time': datetime.now() + timedelta(hours=1),
        'participants': [],
        'winner': None,
        'active': True
    }
    tournaments.append(tournament)
    return tournament

# –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å –º–æ–Ω—Å—Ç—Ä–æ–≤
def generate_monster(player_level):
    base_level = max(1, player_level - 2 + random.randint(0, 4))
    return {
        'health': 50 + base_level * 10,
        'attack': 10 + base_level * 3,
        'exp_reward': 20 + base_level * 5
    }

# –ü—Ä–æ–≥—Ä–µ—Å—Å–∏—è —É—Ä–æ–≤–Ω–µ–π
def calculate_exp_required(level):
    return 100 * (1.5 ** (level - 1))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ç—É—Ä–Ω–∏—Ä–µ
async def join_tournament(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    if user_id not in players:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!")
        return

    active_tournaments = [t for t in tournaments if t['active']]
    if not active_tournaments:
        await update.message.reply_text("–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤.")
        return

    tournament = active_tournaments[-1]
    if user_id in tournament['participants']:
        await update.message.reply_text("–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–º —Ç—É—Ä–Ω–∏—Ä–µ.")
        return

    tournament['participants'].append(user_id)
    await update.message.reply_text(f"–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Ç—É—Ä–Ω–∏—Ä—É {tournament['name']}!")

async def tournament_menu(update: Update, context: CallbackContext):
    keyboard = [
        ['–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Ç—É—Ä–Ω–∏—Ä—É', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—É—Ä–Ω–∏—Ä–µ'],
        ['–ù–∞–∑–∞–¥']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–¢—É—Ä–Ω–∏—Ä—ã:",
        reply_markup=reply_markup
    )
    conversation_states[update.effective_chat.id] = CONVERSATION_STATES['IN_TOURNAMENT_MENU']

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—É—Ä–Ω–∏—Ä–µ
async def tournament_info(update: Update, context: CallbackContext):
    if not tournaments:
        await update.message.reply_text("–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤.")
        return

    tournament = tournaments[-1]
    participants = ", ".join([players[participant]['name'] for participant in tournament['participants']])
    await update.message.reply_text(
        f"–¢—É—Ä–Ω–∏—Ä: {tournament['name']}\n"
        f"–£—á–∞—Å—Ç–Ω–∏–∫–∏: {participants}\n"
        f"–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: {tournament['end_time'].strftime('%Y-%m-%d %H:%M:%S')}"
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∑–µ–ª—å—è
async def use_potion(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    if user_id not in players:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å –ø–æ–º–æ—â—å—é /create.")
        return

    player = players[user_id]
    potion_name = ' '.join(context.args)
    
    if potion_name not in potions:
        await update.message.reply_text("–¢–∞–∫–æ–≥–æ –∑–µ–ª—å—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return

    if potion_name not in player['inventory']:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç —ç—Ç–æ–≥–æ –∑–µ–ª—å—è.")
        return

    potion = potions[potion_name]
    
    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞
    if 'health' in potion:
        player['health'] = min(
            player['max_health'],
            player['health'] + potion['health']
        )
        await update.message.reply_text(f"–í—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ {potion['health']} –∑–¥–æ—Ä–æ–≤—å—è.")
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –∑–µ–ª—å—è –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    player['inventory'].remove(potion_name)
    player['inventory'] = inventory
    await update.message.reply_text(f"–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ {potion_name} –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ {potion['health']} –∑–¥–æ—Ä–æ–≤—å—è.")

async def add_item(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    if user_id not in players:
        await update.message.reply_text("???? –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å –ø–æ–º–æ—â—å—é /create.")
        return

    # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    message_text = update.message.text
    parts = message_text.split()
    if len(parts) < 2:
        await update.message.reply_text("???? –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_item <–∏–º—è_–ø—Ä–µ–¥–º–µ—Ç–∞> [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]")
        return

    item_name = parts[1]
    quantity = 1
    if len(parts) > 2:
        try:
            quantity = int(parts[2])
            if quantity <= 0:
                await update.message.reply_text("???? –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
                return
        except ValueError:
            await update.message.reply_text("???? –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.")
            return

    player = players[user_id]
    inventory = player.get('inventory', [])

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ existence –ø—Ä–µ–¥–º–µ—Ç–∞
    if item_name not in item_weights:
        await update.message.reply_text(f"???? –ü—Ä–µ–¥–º–µ—Ç {item_name} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return

    # –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –≤–µ—Å–∞
    current_weight = sum(item_weights[item] for item in inventory)
    additional_weight = item_weights[item_name] * quantity
    new_weight = current_weight + additional_weight

    if new_weight > MAX_WEIGHT:
        await update.message.reply_text(f"???? –ü—Ä–µ–≤—ã—à–µ–Ω –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è ({MAX_WEIGHT}).")
        return

    if len(inventory) + quantity > MAX_ITEMS:
        await update.message.reply_text(f"–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª–æ–Ω! –ú–∞–∫—Å. {MAX_ITEMS} –ø—Ä–µ–¥–º–µ—Ç–æ–≤.")
        return

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
    for _ in range(quantity):
        inventory.append(item_name)
    player['inventory'] = inventory

    await update.message.reply_text(f"???? –ü—Ä–µ–¥–º–µ—Ç {item_name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å.")

async def remove_item(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    if user_id not in players:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å –ø–æ–º–æ—â—å—é /create.")
        return

    message_text = update.message.text
    parts = message_text.split()
    if len(parts) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /remove_item <–∏–º—è_–ø—Ä–µ–¥–º–µ—Ç–∞> [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]")
        return

    item_name = parts[1]
    quantity = 1
    if len(parts) > 2:
        try:
            quantity = int(parts[2])
            if quantity <= 0:
                await update.message.reply_text("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
                return
        except ValueError:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.")
            return

    player = players[user_id]
    inventory = player.get('inventory', [])

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞
    if item_name not in inventory:
        await update.message.reply_text(f"–ü—Ä–µ–¥–º–µ—Ç–∞ {item_name} –Ω–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ.")
        return

    # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
    count = 0
    while count < quantity and item_name in inventory:
        inventory.remove(item_name)
        count += 1

    player['inventory'] = inventory

    total_weight_removed = 0
    while count < quantity and item_name in inventory:
        inventory.remove(item_name)
        total_weight_removed += item_weights[item_name]
        count += 1
    
    player['inventory_weight'] -= total_weight_removed

    await update.message.reply_text(f"–ü—Ä–µ–¥–º–µ—Ç {item_name} —É–¥–∞–ª–µ–Ω –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è.")

async def error_handler(update: Update, context: CallbackContext):
    error = context.error
    logger.error(msg="–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞:", exc_info=error)
    
    if update.message:
        await update.message.reply_text("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def schedule_world_events(context: CallbackContext):
    event = create_world_event()
    for user_id in players:
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=f"üåç –ú–∏—Ä–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ: {event['description']}\n"
                     f"–≠—Ñ—Ñ–µ–∫—Ç: {event['effect']}"
            )
            apply_world_event_effect(user_id, event)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏—è –∏–≥—Ä–æ–∫—É {user_id}: {e}")

def apply_world_event_effect(user_id: int, event: dict):
    if "–∞—Ç–∞–∫–∞" in event['effect']:
        players[user_id]['attack'] *= 1.2
    elif "–∑–¥–æ—Ä–æ–≤—å–µ" in event['effect']:
        players[user_id]['health'] = min(
            players[user_id]['max_health'],
            players[user_id]['health'] * 1.3
        )

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–∞
async def equip_item(update: Update, context: CallbackContext):
    try:
        user_id = update.message.from_user.id if update.message else update.callback_query.from_user.id
    except AttributeError:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return

    player = players.get(user_id)
    if not player:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!")
        return

    if not context.args:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–£–∫–∞–∂–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏")
        return

    item_name = ' '.join(context.args)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞
    if item_name not in player['inventory']:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–ü—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ")
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–µ–¥–º–µ—Ç–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫
    item_type = None
    item_data = {}
    if item_name in weapons:
        item_type = 'weapon'
        item_data = weapons.get(item_name, {})
    elif item_name in clothes:
        item_type = 'armor'
        item_data = clothes.get(item_name, {})
    else:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–≠—Ç–æ –Ω–µ–ª—å–∑—è —ç–∫–∏–ø–∏—Ä–æ–≤–∞—Ç—å")
        return

    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    defense_bonus = item_data.get('defense_bonus', 0)
    health_bonus = item_data.get('health_bonus', 0)
    attack_bonus = item_data.get('attack_bonus', 0)

    try:
        # –°–Ω–∏–º–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —ç–∫–∏–ø–∏—Ä–æ–≤–∫—É
        if old_item := player['equipped'][item_type]:
            old_data = clothes[old_item] if item_type == 'armor' else weapons[old_item]
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–Ω—è—Ç–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
            player['defense'] -= old_data.get('defense_bonus', 0)
            player['max_health'] -= old_data.get('health_bonus', 0)
            player['attack'] -= old_data.get('attack_bonus', 0)
            player['inventory'].append(old_item)

        # –≠–∫–∏–ø–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç
        player['equipped'][item_type] = item_name
        player['inventory'].remove(item_name)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        player['defense'] += defense_bonus
        player['max_health'] += health_bonus
        player['attack'] += attack_bonus
        player['health'] = min(player['health'], player['max_health'])

        await context.bot.send_message(chat_id=update.effective_chat.id, text=f"‚úÖ {item_name} —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏: {e}")
        await context.bot.send_message(chat_id=update.effective_chat.id, text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫–∏–ø–∏—Ä–æ–≤–∫–µ")

# –î–æ–±–∞–≤—å—Ç–µ callback –¥–ª—è —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏:
async def equip_item_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ callback_query
    user_id = query.from_user.id
    item_name = query.data.split('_')[1]

    if user_id not in players:
        await query.edit_message_text("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!")
        return

    try:
        # –ü–µ—Ä–µ–¥–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        context.args = [item_name]
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–π update —Å message
        class FakeMessage:
            def __init__(self, user_id):
                self.from_user = type('', (), {'id': user_id})()
                
        fake_update = Update(
            update_id=update.update_id,
            callback_query=update.callback_query,
            message=FakeMessage(user_id)
        )
        
        await equip_item(fake_update, context)
        await query.edit_message_text(f"‚úÖ {item_name} —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏")
        await equip_item(update, context)
        await query.message.delete()

async def handle_victory_rewards(update: Update, player: dict):
    # –®–∞–Ω—Å—ã –Ω–∞ –≤—ã–ø–∞–¥–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    reward_chances = {
        'weapon': 40,  # 40% —à–∞–Ω—Å –ø–æ–ª—É—á–∏—Ç—å –æ—Ä—É–∂–∏–µ
        'armor': 30,    # 30% —à–∞–Ω—Å –ø–æ–ª—É—á–∏—Ç—å –±—Ä–æ–Ω—é
        'potion': 70    # 70% —à–∞–Ω—Å –ø–æ–ª—É—á–∏—Ç—å –∑–µ–ª—å–µ
    }

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞–≥—Ä–∞–¥
    rewards = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–ø–∞–¥–µ–Ω–∏–µ –æ—Ä—É–∂–∏—è
    if random.randint(1, 100) <= reward_chances['weapon']:
        weapon = random.choice(list(weapons.keys()))
        rewards.append(weapon)
        player['inventory'].append(weapon)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–ø–∞–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏
    if random.randint(1, 100) <= reward_chances['armor']:
        armor = random.choice(list(clothes.keys()))
        rewards.append(armor)
        player['inventory'].append(armor)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–ø–∞–¥–µ–Ω–∏–µ –∑–µ–ª—å—è
    if random.randint(1, 100) <= reward_chances['potion']:
        potion = random.choice(list(potions.keys()))
        rewards.append(potion)
        player['inventory'].append(potion)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞–≥—Ä–∞–¥–∞—Ö
    if rewards:
        reward_text = "üéÅ –í—ã –ø–æ–ª—É—á–∏–ª–∏:\n" + "\n".join(f"‚Ä¢ {item}" for item in rewards)
    else:
        reward_text = "üò¢ –ù–∞ —ç—Ç–æ—Ç —Ä–∞–∑ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–ø–∞–ª–æ"
    
    await update.message.reply_text(
        f"‚öîÔ∏è –í—ã –ø–æ–±–µ–¥–∏–ª–∏ {player['current_monster']['name']}!\n"
        f"{reward_text}\n"
        f"üí∞ +50 –∑–æ–ª–æ—Ç–∞"
    )
    player['gold'] += 50

    for item in rewards:
        if (len(player['inventory']) >= MAX_ITEMS or 
            player['inventory_weight'] + item_weights[item] > MAX_WEIGHT):
            continue
        player['inventory'].append(item)
        player['inventory_weight'] += item_weights[item]


# –§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –æ—Ä—É–∂–∏—è —Å —É—á–µ—Ç–æ–º –≤–µ—Å–æ–≤
def get_random_weapon():
    total = sum(w['chance'] for w in weapons.values())
    r = random.uniform(0, total)
    current = 0
    for weapon, params in weapons.items():
        if current + params['chance'] >= r:
            return weapon
        current += params['chance']
    return list(weapons.keys())[0]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
async def show_inventory(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    try:
        user_id = update.message.from_user.id
        if user_id not in players:
            await update.message.reply_text("‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return

        player = players.get(user_id, {})

        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π
        inventory = player.get('inventory', [])
        equipped = player.get('equipped', {'weapon': None, 'armor': None})
        weight = player.get('inventory_weight', 0)

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
        inventory_items = "\n".join([f"‚Ä¢ {item}" for item in inventory]) if inventory else "üö´ –ü—É—Å—Ç–æ"

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        message = (
            f"üéí *–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å*:\n{inventory_items}\n\n"
            f"‚öñÔ∏è *–í–µ—Å*: {weight}/{MAX_WEIGHT}\n"
            f"üî¢ *–°–ª–æ—Ç–æ–≤*: {len(inventory)}/{MAX_ITEMS}\n\n"
            f"‚öî *–≠–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–æ*:\n"
            f"- –û—Ä—É–∂–∏–µ: {equipped.get('weapon', 'üö´ –ù–µ—Ç')}\n"
            f"- –ë—Ä–æ–Ω—è: {equipped.get('armor', 'üö´ –ù–µ—Ç')}"
        )

        await update.message.reply_text(message, parse_mode='Markdown')

    except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ show_inventory: {str(e)}")
            await update.message.reply_text("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è")

    if user_id not in players:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å –ø–æ–º–æ—â—å—é /create.")
        return

    player = players[user_id]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å —É—á–µ—Ç–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    item_counts = {}
    for item in inventory:
        item_counts[item] = item_counts.get(item, 0) + 1
    
    inventory_list = []
    for item, count in item_counts.items():
        inventory_list.append(f"‚ñ´Ô∏è {item} √ó{count}")

    equipped = [
        f"‚öî –û—Ä—É–∂–∏–µ: {player['equipped'].get('weapon', '–ù–µ—Ç')}",
        f"üõ° –ë—Ä–æ–Ω—è: {player['equipped'].get('armor', '–ù–µ—Ç')}"
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Å–µ
    weight_info = f"\n‚öñÔ∏è –û–±—â–∏–π –≤–µ—Å: {player.get('inventory_weight', 0)}/{MAX_WEIGHT}"

    inventory = player.get('inventory', [])
    items = "\n".join([f"‚Ä¢ {item}" for item in inventory]) if inventory else "–ü—É—Å—Ç–æ"

    categories = {'weapon': [], 'armor': [], 'potion': [], 'pet': [], 'other': []}
    for item in player['inventory']:
        if item in weapons: categories['weapon'].append(item)
        elif item in clothes: categories['armor'].append(item)
        elif item in potions: categories['potion'].append(item)
        elif item in pets: categories['pet'].append(item)
        else: categories['other'].append(item)

    if not inventory:
        await update.message.reply_text("–í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç.")
        return

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def handle_message(update: Update, context: CallbackContext):
    global conversation_states
    chat_id = update.effective_chat.id
    user_id = update.message.from_user.id
    current_state = conversation_states.get(chat_id, None)
    text = update.message.text

    if text == '–ù–∞–∑–∞–¥':
        if current_state in [CONVERSATION_STATES['IN_GUILD_MENU'], 
                           CONVERSATION_STATES['IN_TOURNAMENT_MENU'],
                           CONVERSATION_STATES['AWAITING_GUILD_NAME']]:
            conversation_states[chat_id] = None
            await main_menu(update, context)
        return

    if current_state in [CONVERSATION_STATES['AWAITING_JOIN_GUILD']]:
            # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –≥–∏–ª—å–¥–∏–π
            conversation_states[chat_id] = CONVERSATION_STATES['IN_GUILD_MENU']
            await guild_menu(update, context)
            return

    
    if text == '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–∏–ª—å–¥–∏–∏':
        await guild_info(update, context)
        return

    if text == '–í—Å—Ç—É–ø–∏—Ç—å –≤ –≥–∏–ª—å–¥–∏—é':
        if user_id not in players:
            await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!")
            return
            
        if 'guild' in players[user_id]:
            await update.message.reply_text("‚ùå –í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥–∏–ª—å–¥–∏–∏!")
            return

        conversation_states[chat_id] = CONVERSATION_STATES['AWAITING_JOIN_GUILD']
        await update.message.reply_text("üìõ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–∏–ª—å–¥–∏–∏ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è:")
        return

    if current_state == CONVERSATION_STATES['AWAITING_JOIN_GUILD']:
        guild_name = text.strip()
        await join_guild(update, context, guild_name)
        conversation_states[chat_id] = None
        return

    if text == '–°–æ–∑–¥–∞—Ç—å –≥–∏–ª—å–¥–∏—é':
        if user_id not in players:
            await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∫–æ–º–∞–Ω–¥–æ–π /create!")
            return
            
        if 'guild' in players[user_id]:
            await update.message.reply_text("‚ùå –í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥–∏–ª—å–¥–∏–∏!")
            return
            
        conversation_states[chat_id] = CONVERSATION_STATES['AWAITING_GUILD_NAME']
        await update.message.reply_text("üìõ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–∏–ª—å–¥–∏–∏ (3-20 —Å–∏–º–≤–æ–ª–æ–≤):")
        return

    # 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –≥–∏–ª—å–¥–∏–∏
    if current_state == CONVERSATION_STATES['AWAITING_GUILD_NAME']:
        guild_name = text.strip()
        
        if len(guild_name) < 3 or len(guild_name) > 20:
            await update.message.reply_text("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è (3-20 —Å–∏–º–≤–æ–ª–æ–≤)")
            return
            
        if guild_name in guilds:
            await update.message.reply_text("‚ùå –ì–∏–ª—å–¥–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return
            
        # –°–æ–∑–¥–∞–Ω–∏–µ –≥–∏–ª—å–¥–∏–∏
        guilds[guild_name] = {
            'leader': user_id,
            'members': [user_id],
            'created_at': datetime.now(),
            'level': 1
        }
        players[user_id]['guild'] = guild_name
        conversation_states[chat_id] = None
        
        await update.message.reply_text(
            f"‚úÖ –ì–∏–ª—å–¥–∏—è ¬´{guild_name}¬ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n"
            f"üëë –í—ã —Å—Ç–∞–ª–∏ –ª–∏–¥–µ—Ä–æ–º –≥–∏–ª—å–¥–∏–∏!"
        )

    if current_state == "waiting_for_name":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        if not text:
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.")
            return
        name = text.strip()  # Remove any leading/trailing whitespace

        # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        if user_id not in players:
            # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤
            players[user_id] = {
                'name': name,
                'level': 1,
                'health': 100,
                'max_health': 100,
                'attack': 10,
                'defense': 5,
                'gold': 0,
                'location': '–î–µ—Ä–µ–≤–Ω—è',
                'inventory': [],
                'equipped': {'weapon': None, 'armor': None},
                'pet': None,
                'current_monster': None,
                'experience': 0,
                'experience_to_next_level': 100,
                'inventory_weight': 0
            }
            init_player(user_id, name)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
            await update.message.reply_text(f"–ü–µ—Ä—Å–æ–Ω–∞–∂ {name} —Å–æ–∑–¥–∞–Ω! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π!")
            # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
            conversation_states[chat_id] = None
            await main_menu(update, context)
        else:
            await update.message.reply_text("–í—ã —É–∂–µ —Å–æ–∑–¥–∞–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!")
        return

    if user_id not in players:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å –ø–æ–º–æ—â—å—é /create.")
        return

    if text == '–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –º–∏—Ä':
        await explore(update, context)
    elif text == '–°—Ä–∞–∂–µ–Ω–∏–µ':
        await fight(update, context)
    elif text == '–°—Ç–∞—Ç—É—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞':
        await status(update, context)
    elif text == '–°–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞':
        await create_character(update, context)
    elif text == '–ü–µ—Ä–µ–π—Ç–∏ –≤ –≥–æ—Ä–æ–¥':
        await go_to_town(update, context)
    elif text == '–ê—Ç–∞–∫–æ–≤–∞—Ç—å':
        await start_battle(update, context)
    elif text == '–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –¥–∞–ª—å—à–µ':
        await explore(update, context)
    elif text == '–ü—Ä–∏—Ä—É—á–∏—Ç—å –∑–≤–µ—Ä—è':
        await get_pet(update, context)
    elif text == '–û–¥–µ—Ç—å –æ–¥–µ–∂–¥—É':
        await wear_cloth(update, context)
    if text == '–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å':
        await show_inventory(update, context)
    elif text == '–≠–∫–∏–ø–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç':
        await equip_item_menu(update, context)  # –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
    elif text == '–ì–∏–ª—å–¥–∏–∏':
        await guild_menu(update, context)       # –ú–µ–Ω—é –≥–∏–ª—å–¥–∏–π
    elif text == '–¢—É—Ä–Ω–∏—Ä—ã':
        await tournament_menu(update, context)  # –ú–µ–Ω—é —Ç—É—Ä–Ω–∏—Ä–æ–≤

async def equip_item_menu(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    if user_id not in players:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!")
        return

    player = players[user_id]
    equippable = [item for item in player['inventory'] if item in weapons or item in clothes]
    
    if not equippable:
        await update.message.reply_text("–í –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏.")
        return

    keyboard = [[InlineKeyboardButton(item, callback_data=f"equip_{item}")] for item in equippable]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏:", 
                                  reply_markup=InlineKeyboardMarkup(keyboard))

async def guild_menu(update: Update, context: CallbackContext):
    keyboard = [
        ['–°–æ–∑–¥–∞—Ç—å –≥–∏–ª—å–¥–∏—é', '–í—Å—Ç—É–ø–∏—Ç—å –≤ –≥–∏–ª—å–¥–∏—é'],
        ['–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–∏–ª—å–¥–∏–∏', '–ù–∞–∑–∞–¥']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–ì–∏–ª—å–¥–∏–∏:", reply_markup=reply_markup)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Ö–æ–¥–∞ –≤ –º–µ–Ω—é –≥–∏–ª—å–¥–∏–π
    conversation_states[update.effective_chat.id] = CONVERSATION_STATES['IN_GUILD_MENU']

async def tournament_menu(update: Update, context: CallbackContext):
    keyboard = [
        ['–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Ç—É—Ä–Ω–∏—Ä—É', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—É—Ä–Ω–∏—Ä–µ'],
        ['–ù–∞–∑–∞–¥']  # –ö–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥ —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–¢—É—Ä–Ω–∏—Ä—ã:",
        reply_markup=reply_markup
    )

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
async def create_character(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    if user_id in players:
        await update.message.reply_text("üî¥ –í—ã —É–∂–µ —Å–æ–∑–¥–∞–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!")
        await main_menu(update, context)
        return

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∏–º–µ–Ω–∏
    conversation_states[update.effective_chat.id] = "waiting_for_name"
    await update.message.reply_text("üìù –í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:")

def level_up_player(user_id: int):
    player = players[user_id]
    player['level'] += 1
    player['max_health'] += 20
    player['health'] = player['max_health']
    player['attack'] += 5
    player['defense'] += 2
    player['experience'] = 0
    player['experience_to_next_level'] = 100 * player['level']
    player['active_buffs'] = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
def level_up(user_id):
    players[user_id]['level'] += 1
    players[user_id]['health'] = 100 + (players[user_id]['level'] - 1) * 10
    players[user_id]['attack'] = 10 + (players[user_id]['level'] - 1) * 2
    players[user_id]['experience_to_next_level'] = 100 * players[user_id]['level']

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –º–∏—Ä–∞
async def explore(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    if user_id not in players:
        await update.message.reply_text("üü¢ –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å –ø–æ–º–æ—â—å—é /create.")
        return

    location = random.choice(locations)
    players[user_id]['location'] = location
    await update.message.reply_text(f"üìç –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ {location}. üîç –ò—Å—Å–ª–µ–¥—É–π—Ç–µ –¥–∞–ª—å—à–µ!")
    await main_menu(update, context)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å—Ä–∞–∂–µ–Ω–∏—è —Å –º–æ–Ω—Å—Ç—Ä–∞–º–∏
async def fight(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    if user_id not in players or players[user_id]['health'] <= 0:
        await update.message.reply_text("üü¢ –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å –ø–æ–º–æ—â—å—é /create.")
        return

    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –º–æ–Ω—Å—Ç—Ä–∞
    monster_name = random.choice(list(monsters.keys()))
    monster = monsters[monster_name]

    # –£—Ä–æ–≤–µ–Ω—å –≤–ª–∏—è–µ—Ç –Ω–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –º–æ–Ω—Å—Ç—Ä–∞
    player_level = players[user_id]['level']
    base_health = monster['base_health'] + player_level * 2
    base_attack = monster['base_attack'] + player_level * 1

    # –°–ª—É—á–∞–π–Ω—ã–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    monster_health = random.randint(int(base_health * 0.9), int(base_health * 1.1))
    monster_attack = random.randint(int(base_attack * 0.9), int(base_attack * 1.1))

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –º–æ–Ω—Å—Ç—Ä–∞
    players[user_id]['current_monster'] = {
        'name': monster_name,
        'health': monster_health,
        'attack': monster_attack
    }

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–Ω—Å—Ç—Ä–µ –∏ –≤—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è
    keyboard = [
        ['–ê—Ç–∞–∫–æ–≤–∞—Ç—å', '–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –¥–∞–ª—å—à–µ']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text(
        f"üëª –í—ã –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏ {monster_name}!\n"
        f"üí° –û–ø–∏—Å–∞–Ω–∏–µ: {monster['description']}\n"
        f"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: {monster_health}\n"
        f"üó° –ê—Ç–∞–∫–∞: {monster_attack}\n\n"
        f"üéÆ –í–∞—à —É—Ä–æ–≤–µ–Ω—å: {players[user_id]['level']}\n"
        f"‚ù§Ô∏è –í–∞—à–µ –∑–¥–æ—Ä–æ–≤—å–µ: {players[user_id]['health']}\n"
        f"üó° –í–∞—à–∞ –∞—Ç–∞–∫–∞: {players[user_id]['attack']}\n\n"
        "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –±–æ—è
async def start_battle(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    if user_id not in players or players[user_id]['health'] <= 0:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å –ø–æ–º–æ—â—å—é /create.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –º–æ–Ω—Å—Ç—Ä–∞
    current_monster = players[user_id].get('current_monster')
    if not current_monster:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—Å—Ç—Ä–µ—Ç—å—Ç–µ –º–æ–Ω—Å—Ç—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /fight.")
        return

    monster_name = current_monster['name']
    monster_health = current_monster['health']
    monster_attack = current_monster['attack']

    # –°—Ä–∞–∂–µ–Ω–∏–µ
    while monster_health > 0 and players[user_id]['health'] > 0:
        player_damage = random.randint(5, players[user_id]['attack'])
        monster_health -= player_damage
        players[user_id]['health'] -= monster_attack
        await update.message.reply_text(f"‚öîÔ∏è –í—ã –∞—Ç–∞–∫–æ–≤–∞–ª–∏ {monster_name} –Ω–∞ {player_damage} —É—Ä–æ–Ω–∞!")
        await update.message.reply_text(f"{monster_name} –∞—Ç–∞–∫—É–µ—Ç –≤–∞—Å! –í–∞—à–µ –∑–¥–æ—Ä–æ–≤—å–µ: {players[user_id]['health']}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –±–æ—è
        if monster_health <= 0:
            await update.message.reply_text(f"–í—ã –ø–æ–±–µ–¥–∏–ª–∏ {monster_name}!")
            level_up(user_id)
            await update.message.reply_text(f"–í–∞—à —É—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—à–µ–Ω! –£—Ä–æ–≤–µ–Ω—å: {players[user_id]['level']}\n"
                                          f"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: {players[user_id]['health']}\n"
                                          f"–ê—Ç–∞–∫–∞: {players[user_id]['attack']}")
            # –ù–∞–≥—Ä–∞–∂–¥–∞–µ–º –∏–≥—Ä–æ–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–π –æ–¥–µ–∂–¥–æ–π
            if random.choice([True, False]):  # 50% —à–∞–Ω—Å –≤—ã–ø–∞–¥–µ–Ω–∏—è –æ–¥–µ–∂–¥—ã
                cloth_name = random.choice(list(clothes.keys()))
                players[user_id]['inventory'].append(cloth_name)
                await update.message.reply_text(f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ {cloth_name}!")
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –º–æ–Ω—Å—Ç—Ä–∞
            players[user_id]['current_monster'] = None
            await main_menu(update, context)
            return

        if players[user_id]['health'] <= 0:
            await update.message.reply_text(f"‚ö∞Ô∏è –í—ã –ø–æ–≥–∏–±–ª–∏ –≤ –±–æ—é —Å {monster_name}!")
            # –í–æ–∑—Ä–æ–∂–¥–µ–Ω–∏–µ –≤ –≥–æ—Ä–æ–¥–µ
            players[user_id]['health'] = 100  # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–¥–æ—Ä–æ–≤—å–µ
            players[user_id]['location'] = 'üèôÔ∏è –ì–æ—Ä–æ–¥'
            await update.message.reply_text("–í—ã –≤–æ–∑—Ä–æ–¥–∏–ª–∏—Å—å –≤ –≥–æ—Ä–æ–¥–µ!")
            await heal(update, context)
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –º–æ–Ω—Å—Ç—Ä–∞
            players[user_id]['current_monster'] = None
            await main_menu(update, context)
            return


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è –≤ –≥–æ—Ä–æ–¥–µ
async def heal(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    if user_id not in players:
        await update.message.reply_text("üü¢ –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å –ø–æ–º–æ—â—å—é /create.")
        return

    if players[user_id]['location'] != 'üèôÔ∏è –ì–æ—Ä–æ–¥':
        await update.message.reply_text("üèôÔ∏è –í—ã –Ω–µ –≤ –≥–æ—Ä–æ–¥–µ. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –≥–æ—Ä–æ–¥, —á—Ç–æ–±—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ.")
        return

    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –¥–æ –º–∞–∫—Å–∏–º—É–º–∞
    players[user_id]['health'] = 100 + (players[user_id]['level'] - 1) * 10
    await update.message.reply_text("üß† –í–∞—à–µ –∑–¥–æ—Ä–æ–≤—å–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
    await main_menu(update, context)

item_effects = {
    'small_potion': {'health': 10},
    # –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏ –∏—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
}

async def use_item(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    if user_id not in players:
        await update.message.reply_text("???? –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å –ø–æ–º–æ—â—å—é /create.")
        return

    message_text = update.message.text
    parts = message_text.split()
    if len(parts) < 2:
        await update.message.reply_text("???? –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /use_item <–∏–º—è_–ø—Ä–µ–¥–º–µ—Ç–∞>")
        return

    item_name = parts[1]

    player = players[user_id]
    inventory = player.get('inventory', [])

    if item_name not in inventory:
        await update.message.reply_text(f"???? –ü—Ä–µ–¥–º–µ—Ç–∞ {item_name} –Ω–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ.")
        return

    if item_name not in item_effects:
        await update.message.reply_text(f"???? –ü—Ä–µ–¥–º–µ—Ç {item_name} –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.")
        return

    effect = item_effects[item_name]

    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞
    if 'health' in effect:
        player['health'] += effect['health']
        if player['health'] > 100:  # –ü—Ä–∏–º–µ—Ä –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è
            player['health'] = 100
        await update.message.reply_text(f"???? –í—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –∑–¥–æ—Ä–æ–≤—å–µ –Ω–∞ {effect['health']}.")
    # –î–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

    # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    inventory.remove(item_name)
    player['inventory'] = inventory

    await update.message.reply_text(f"???? –ü—Ä–µ–¥–º–µ—Ç {item_name} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥
async def go_to_town(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    if user_id not in players:
        await update.message.reply_text("üü¢ –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å –ø–æ–º–æ—â—å—é /create.")
        return

    players[user_id]['location'] = 'üèôÔ∏è –ì–æ—Ä–æ–¥'
    await update.message.reply_text("üèôÔ∏è –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ì–æ—Ä–æ–¥–µ. –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ.")
    await heal(update, context)
    await main_menu(update, context)

item_categories = {
    'small_potion': '–∑–µ–ª—å—è',
    'sword': '–æ—Ä—É–∂–∏–µ',
    'shield': '–±—Ä–æ–Ω—è',
    # –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
}

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
async def status(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    if user_id not in players:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å –ø–æ–º–æ—â—å—é /create.")
        return

    player = players[user_id]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    if 'equipped' not in player:
        player['equipped'] = {'weapon': None, 'armor': None}
    if 'max_health' not in player:
        player['max_health'] = 100
        
    equipped_weapon = player['equipped']['weapon'] or "–ù–µ—Ç"
    equipped_armor = player['equipped']['armor'] or "–ù–µ—Ç"
    inventory = "\n".join(player['inventory']) if player['inventory'] else "–ü—É—Å—Ç–æ"

    attack = player['attack']
    if player['equipped']['weapon']:
        attack += weapons[player['equipped']['weapon']]['attack_bonus']

    await update.message.reply_text(
        f"–ò–º—è: {player['name']}\n"
        f"–£—Ä–æ–≤–µ–Ω—å: {player['level']}\n"
        f"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: {player['health']}/{player['max_health']}\n"
        f"üó° –ê—Ç–∞–∫–∞: {player.get('attack_range', player['attack'])}\n"
        f"üõ° –ó–∞—â–∏—Ç–∞: {player['defense']}\n"
        f"üìç –õ–æ–∫–∞—Ü–∏—è: {player['location']}\n"
        f"‚öî –≠–∫–∏–ø–∏—Ä–æ–≤–∫–∞:\n"
        f"  –û—Ä—É–∂–∏–µ: {equipped_weapon}\n"
        f"  –ë—Ä–æ–Ω—è: {equipped_armor}\n"
        f"üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å:\n{inventory}"
    )
    await main_menu(update, context)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏—Ä—É—á–µ–Ω–∏—è –∑–≤–µ—Ä—è
async def get_pet(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    if user_id not in players:
        await update.message.reply_text("üü¢ –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å –ø–æ–º–æ—â—å—é /create.")
        return

    keyboard = []
    for pet_name, pet_info in pets.items():
        keyboard.append([InlineKeyboardButton(f"{pet_name}", callback_data=f"get_pet_{pet_name}")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("ü¶æ –ö–∞–∫–æ–≥–æ –∑–≤–µ—Ä—è –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏—Ä—É—á–∏—Ç—å?", reply_markup=reply_markup)

# Callback –¥–ª—è –ø—Ä–∏—Ä—É—á–µ–Ω–∏—è –∑–≤–µ—Ä—è
async def pet_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id
    data_parts = query.data.split('_')
    if len(data_parts) < 2:
        await query.edit_message_text("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö.")
        return
    pet_name = data_parts[1]

    if user_id not in players:
        await query.edit_message_text("üü¢ –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å –ø–æ–º–æ—â—å—é /create.")
        return

    # –®–∞–Ω—Å –ø—Ä–∏—Ä—É—á–µ–Ω–∏—è 50%
    success = random.choice([True, False])
    if success:
        players[user_id]['pet'] = pet_name
        await query.edit_message_text(f"üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Ä—É—á–∏–ª–∏ {pet_name}!")
    else:
        await query.edit_message_text(f"‚ö∞Ô∏è –ù–µ—É–¥–∞—á–Ω–æ–µ –ø—Ä–∏—Ä—É—á–µ–Ω–∏–µ {pet_name}!")
    await main_menu(update, context)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–¥–µ–≤–∞–Ω–∏—è –æ–¥–µ–∂–¥—ã
async def wear_cloth(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    if user_id not in players:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å –ø–æ–º–æ—â—å—é /create.")
        return

    keyboard = []
    for cloth_name, cloth_info in clothes.items():
        keyboard.append([InlineKeyboardButton(cloth_name, callback_data=f"wear_{cloth_name}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–µ–∂–¥—É –¥–ª—è –Ω–∞–¥–µ–≤–∞–Ω–∏—è:", reply_markup=reply_markup)

async def send_notification(user_id, message):
    try:
        await context.bot.send_message(
            chat_id=user_id,
            text=f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {message}"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

# Callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–¥–µ–≤–∞–Ω–∏—è –æ–¥–µ–∂–¥—ã
async def wear_cloth_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id
    cloth_name = query.data.split('_')[1]

    if user_id not in players:
        await query.edit_message_text("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å –ø–æ–º–æ—â—å—é /create.")
        return

    player = players[user_id]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
    if cloth_name not in player['inventory']:
        await query.edit_message_text("‚ùå –≠—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ—Ç –≤ –≤–∞—à–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–µ–¥–º–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –±—Ä–æ–Ω–µ–π
    if cloth_name not in clothes:
        await query.edit_message_text("‚ùå –≠—Ç–æ –Ω–µ–ª—å–∑—è —ç–∫–∏–ø–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ –±—Ä–æ–Ω—é.")
        return

    # –≠–∫–∏–ø–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ –æ–±—â—É—é —Å–∏—Å—Ç–µ–º—É
    try:
        context.args = [cloth_name]
        await equip_item(update, context)
        await query.edit_message_text(f"‚úÖ {cloth_name} —É—Å–ø–µ—à–Ω–æ —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–∞.")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    health_bonus = clothes[cloth_name]['health_bonus']
    attack_bonus = clothes[cloth_name]['attack_bonus']
    players[user_id]['health'] += health_bonus
    players[user_id]['attack'] += attack_bonus

    await main_menu(update, context)
    
# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def main_menu(update: Update, context: CallbackContext):
    conversation_states[update.effective_chat.id] = None
    
    keyboard = [
        ['–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –º–∏—Ä', '–°—Ä–∞–∂–µ–Ω–∏–µ'],
        ['–°—Ç–∞—Ç—É—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞', '–ü–µ—Ä–µ–π—Ç–∏ –≤ –≥–æ—Ä–æ–¥'],
        ['–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å', '–≠–∫–∏–ø–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç'],
        ['–ì–∏–ª—å–¥–∏–∏', '–¢—É—Ä–Ω–∏—Ä—ã']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    try:
        if update.message.text == "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:":
            await update.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
        else:
            await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=reply_markup)
    except:
        await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=reply_markup)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: CallbackContext):
    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É '–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è –≤ —Ñ—ç–Ω—Ç–µ–∑–∏–π–Ω–æ–º –º–∏—Ä–µ'! –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, —Å–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å –ø–æ–º–æ—â—å—é /create.")
    await main_menu(update, context)

def migrate_old_players():
    for user_id in list(players.keys()):
        player = players[user_id]
        
        # –ú–∏–≥—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ä—É—é –æ–¥–µ–∂–¥—É
        if 'cloth' in player:
            for item in player['cloth']:
                if item not in player['inventory']:
                    player['inventory'].append(item)
            del player['cloth']
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è
        if 'equipped' not in player:
            player['equipped'] = {
                'weapon': None,
                'armor': None
            }
        if 'max_health' not in player:
            player['max_health'] = 100
        if 'defense' not in player:
            player['defense'] = 5

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main():
    # –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π)
    token = '–°–Æ–î–ê –¢–û–ö–ï–ù –ë–û–¢–ê'
    application = Application.builder().token(token).build()
    
    # –î–æ–±–∞–≤–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    job_queue = application.job_queue
    job_queue.run_repeating(tournament_scheduler, interval=3600, first=10)
    job_queue.run_repeating(world_event_scheduler, interval=600, first=5)
    job_queue.run_repeating(lambda _: save_game(), interval=300)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler('start', start))
    application.add_handler(CommandHandler('create', create_character))
    application.add_handler(CommandHandler('explore', explore))
    application.add_handler(CommandHandler('fight', fight))
    application.add_handler(CommandHandler('status', status))
    application.add_handler(CommandHandler('heal', heal))
    application.add_handler(CommandHandler('wear_cloth', wear_cloth))
    application.add_handler(CommandHandler('create_guild', create_guild))
    application.add_handler(CommandHandler('join_guild', join_guild))
    application.add_handler(CommandHandler('guild_info', guild_info))
    application.add_handler(CommandHandler('show_world_events', show_world_events))
    application.add_handler(CommandHandler('join_tournament', join_tournament))
    application.add_handler(CommandHandler('tournament_info', tournament_info))
    application.add_handler(CommandHandler('use_potion', use_potion))
    application.add_handler(CommandHandler('equip_item', equip_item))
    application.add_handler(CommandHandler('equip', equip_item))
    application.add_handler(CommandHandler('show_inventory', show_inventory))
    application.add_handler(CallbackQueryHandler(wear_cloth_callback, pattern='^(wear_)'))
    application.add_handler(CallbackQueryHandler(pet_callback, pattern='^(get_pet_)'))
    application.add_handler(CallbackQueryHandler(equip_item_callback, pattern='^equip_'))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.Text() & ~filters.Command(), handle_message))
    application.add_error_handler(error_handler)
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
#    load_game()
    migrate_old_players()
    main()